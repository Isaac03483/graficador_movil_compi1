/*SECCIÓN 1: CÓDIGO*/
/*CODIGO PARA LA CREACIÓN DEL CUP:
java -jar java-cup-11b.jar -parser GraficadorCup /home/ameri/Escritorio/2022/compis_uno/Graficador/app/src/main/java/com/example/jflex_cup/graficadorcup/graficadorCup.cup
*/

/* TEXTO PARA PRUEBAS
Def Barras {
    titulo: "titulo de prueba";
    ejex: ["eje 1", "eje 2"];
    ejey: [3,4+2];
    unir:[{0,0},{1,1}];
}

Def Pie{
    titulo: "Grafica 2";
    tipo: Cantidad;
    total: 25;
    etiquetas: ["Compis 1", "Compis 2"];
    valores:[5, 10];
    unir:[{0,0},{1,1}];
    extra: "resto";
}

*/

package com.example.jflex_cup.graficadorcup;

import java_cup.runtime.*;
import com.example.models.Graficador;
import com.example.models.Tipo;
import com.example.error.*;
import java.util.ArrayList;
import java.util.List;
import com.example.jflex_cup.graficadorflex.GraficadorLexico;


parser code {:

    public GraficadorCup(GraficadorLexico lexer) {
        super(lexer);
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        listaErrores.add(new ErrorObj(ErrorType.SINTACTICO, sym.terminalNames[cur_token.sym],"valor no esperado", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }

    boolean tituloCreado = false;
    boolean etiquetaCreada = false;
    boolean valorCreado = false;
    boolean ejeXCreado = false;
    boolean ejeYCreado = false;
    boolean tuplasCreadas = false;
    boolean tipoCreado = false;
    boolean totalCreado = false;
    boolean extraCreado = false;
    Graficador graficador = new Graficador();
    List<String> poolString = new ArrayList<>();
    List<ErrorObj> listaErrores = new ArrayList<>();

    public void agregarPoolString(String cadena){
        poolString.add(cadena);
        System.out.println("ESTA ES UNA PRUEBA DE QUE ESTA ENTRANDO AL POOLSTRING: "+cadena);
        poolString.size();
    }

    public void agregarTitulo(String cadena){
        if(!tituloCreado){
            graficador.setTitulo(cadena);
        } else {
            System.out.println("ERROR EN TITULO, YA SE HA ESPECIFICADO UNO ANTES.");
        }
    }

    public void agregarEjeX(){
        if(!ejeXCreado){
            graficador.setEjeX(poolString);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarEjeY(Double expd){
        if(!ejeYCreado){
            graficador.agregarEjeY(expd);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarEtiqueta(){
        if(!etiquetaCreada){
            graficador.setEtiqueta(poolString);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarValor(Double expd){
        if(!valorCreado){
            graficador.agregarValor(expd);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTupla(Integer valorL, Integer valorR){
        if(!tuplasCreadas){
            graficador.agregarTupla(valorL, valorR);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTipo(Tipo tipo){
        if(!tipoCreado){
            graficador.setTipo(tipo);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTotal(Double total){
        if(!totalCreado && graficador.getTipo() == Tipo.CANTIDAD){
            graficador.setTotal(total);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarExtra(String cadena){
        if(!extraCreado){
            graficador.setExtra(cadena);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void crearBarras(){
        if(tituloCreado && ejeXCreado && ejeYCreado && tuplasCreadas){
            graficador.crearGraficaBarras();
        } else {
            System.out.println("ERROR EN LA CREACIÓN DE LA GRÁFICA DE BARRAS POR FALTA DE DATOS.");
        }

        tituloCreado = false;
        ejeXCreado = false;
        ejeYCreado = false;
        tuplasCreadas = false;
        poolString.clear();
    }

    public void crearPie(){

        if(tituloCreado && etiquetaCreada && valorCreado && tuplasCreadas && tipoCreado && totalCreado && extraCreado){

            graficador.crearGraficaPie();
        } else {
            System.out.println("ERROR AL INTENTAR CREAR LA GRÁFICA POR FALTA DE VALORES.");
        }

        tituloCreado = false;
        etiquetaCreada = false;
        valorCreado = false;
        tuplasCreadas = false;
        tipoCreado = false;
        totalCreado = false;
        extraCreado = false;
        poolString.clear();
    }

    private void agregarError(Symbol cur_token, String message){

        listaErrores.add(new ErrorObj(ErrorType.SINTACTICO,cur_token.toString(), message, cur_token.left, cur_token.right));

    }

    public List<ErrorObj> getListaErrores(){
        return listaErrores;
    }

    public Graficador getGraficador(){
        return graficador;
    }


:}

/*SECCIÓN DE TERMINALES*/
terminal DEF, BARRAS, PIE, COMA, TITULO, EJEX, EJEY, ETIQUETAS, VALORES, UNIR;
terminal TIPO, CANTIDAD, PORCENTAJE, TOTAL, EXTRA;
terminal SUMA, RESTA, MULTIPLICACION, DIVISION, DOS_PUNTOS, PUNTO_COMA, PARENTESIS_A;
terminal PARENTESIS_C, CORCHETE_A, CORCHETE_C, LLAVE_A, LLAVE_C;
terminal String CADENA;
terminal Integer ENTERO;
terminal Double DECIMAL;

/*SECCIÓN DE NO TERMINALES*/
non terminal D, G, BA, PA, T, X, Y, U, C, TUP, VAL, N, TOT, TP;
non terminal E, EX, V, LN/*EXPP,*/;
non terminal Integer EXP;
non terminal Double EXPD;


/*SECCIÓN DE PRECEDENCIA*/

precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
precedence left TITULO, EJEX, EJEY, ETIQUETAS, VALORES, UNIR, TIPO, TOTAL, EXTRA;
precedence left BARRAS, PIE;

/*GRAMÁTICA TIPO 2: REGLAS SINTÁCTICAS*/
start with D;

D ::= DEF G D
    | DEF G
    | error DEF
    | error LLAVE_C
    | error PUNTO_COMA
    ;

G ::= BARRAS LLAVE_A BA LLAVE_C                                 {:crearBarras();:}
    | PIE LLAVE_A PA LLAVE_C                                    {:crearPie();:}

    ;

BA ::= T BA                                                 {:tituloCreado = true;:}
    |X BA                                                   {:ejeXCreado = true;:}
    |Y BA                                                   {:ejeYCreado = true;:}
    |U BA                                                   {:tuplasCreadas = true;:}
    |T                                                      {:tituloCreado = true;:}
    |X                                                      {:ejeXCreado = true;:}
    |Y                                                      {:ejeYCreado = true;:}
    |U                                                      {:tuplasCreadas = true;:}
    ;
T ::= TITULO DOS_PUNTOS CADENA:cadena PUNTO_COMA                        {:agregarTitulo(cadena);:}
    ;

X ::= EJEX DOS_PUNTOS CORCHETE_A C CORCHETE_C PUNTO_COMA        {:agregarEjeX();System.out.println("ESTA ENTRANDO");:}
 /*   | error DOS_PUNTOS                                          {:agregarError(cur_token, "Se esperaba ':''");:}
    | error PUNTO_COMA                                          {:agregarError(cur_token, "Se esperaba ';''");:}
    | error CORCHETE_A                                          {:agregarError(cur_token, "Se esperaba '[''");:}
    | error CORCHETE_C                                          {:agregarError(cur_token, "Se esperaba '}''");:}*/
    ;

C ::= CADENA:cadena1                                            {:agregarPoolString(cadena1);:}
    | CADENA:cadena1 COMA C                                     {:agregarPoolString(cadena1);:}
    ;

Y ::= EJEY DOS_PUNTOS CORCHETE_A LN CORCHETE_C PUNTO_COMA       {::}
  /*  | error DOS_PUNTOS                                          {:agregarError(cur_token, "Se esperaba ':''");:}
    | error PUNTO_COMA                                          {:agregarError(cur_token, "Se esperaba ';''");:}
    | error CORCHETE_A                                          {:agregarError(cur_token, "Se esperaba '[''");:}
    | error CORCHETE_C                                          {:agregarError(cur_token, "Se esperaba '}''");:}*/
    ;

LN ::= EXPD:expd COMA LN                                        {:agregarEjeY(expd);:}
    | EXPD:expd                                                 {:agregarEjeY(expd);:}
    ;

U ::= UNIR DOS_PUNTOS CORCHETE_A TUP CORCHETE_C PUNTO_COMA
 /*   | error DOS_PUNTOS                                          {:agregarError(cur_token, "Se esperaba ':''");:}
    | error PUNTO_COMA                                          {:agregarError(cur_token, "Se esperaba ';''");:}
    | error CORCHETE_A                                          {:agregarError(cur_token, "Se esperaba '[''");:}
    | error CORCHETE_C                                          {:agregarError(cur_token, "Se esperaba '}''");:}*/
    ;

TUP ::= LLAVE_A VAL LLAVE_C
    | LLAVE_A VAL LLAVE_C COMA TUP
 /*   | error LLAVE_A                                             {:agregarError(cur_token, "Se esperaba '{''");:}
    | error LLAVE_C                                             {:agregarError(cur_token, "Se esperaba '}''");:}
    | error COMA                                                {:agregarError(cur_token, "Se esperaba ',''");:}*/
    ;

VAL ::= EXP:e1 COMA EXP:e2                  {:agregarTupla(e1,e2);:}
    ;

/*
EXPP ::= EXP EXPP
    | EXP:e
    ;
*/

EXP ::= EXP:e1 SUMA EXP:e2                  {:RESULT = new Integer(e1.intValue() + e2.intValue());:}
    | EXP:e1 RESTA EXP:e2                   {:RESULT = new Integer(e1.intValue() - e2.intValue());:}
    | EXP:e1 MULTIPLICACION EXP:e2          {:RESULT = new Integer(e1.intValue() * e2.intValue());:}
    | EXP:e1 DIVISION EXP:e2                {:RESULT = new Integer(e1.intValue() / e2.intValue());:}
    | ENTERO:n                              {:RESULT = n;:}
    | PARENTESIS_A EXP:e PARENTESIS_C       {:RESULT = e;:}

    ;

EXPD::=  EXPD:ed1 SUMA EXPD:ed2             {:RESULT = new Double(ed1.intValue() + ed2.intValue());:}
    | EXPD:ed1 RESTA EXPD:ed2               {:RESULT = new Double(ed1.intValue() - ed2.intValue());:}
    | EXPD:ed1 MULTIPLICACION EXPD:ed2      {:RESULT = new Double(ed1.intValue() * ed2.intValue());:}
    | EXPD:ed1 DIVISION EXPD:ed2            {:RESULT = new Double(ed1.intValue() / ed2.intValue());:}
    | ENTERO:n                              {:RESULT = Double.valueOf(n);:}
    | DECIMAL:d                             {:RESULT = d;:}
    | PARENTESIS_A EXPD:e PARENTESIS_C      {:RESULT = e;:}
/*    | error SUMA                            {:agregarError(cur_token, "Se esperaba '+''");:}
    | error RESTA                           {:agregarError(cur_token, "Se esperaba '-''");:}
    | error MULTIPLICACION                  {:agregarError(cur_token, "Se esperaba '*''");:}
    | error DIVISION                        {:agregarError(cur_token, "Se esperaba '/''");:}
    | error PARENTESIS_A                    {:agregarError(cur_token, "Se esperaba '(''");:}
    | error PARENTESIS_C                    {:agregarError(cur_token, "Se esperaba ')''");:}*/
    ;

PA ::= T PA                                 {:tituloCreado = true;:}
    |TP PA                                  {:tipoCreado = true;:}
    |E PA                                   {:etiquetaCreada = true;:}
    |V PA                                   {:valorCreado = true;:}
    |EX PA                                  {:extraCreado = true;:}
    |TOT PA                                 {:totalCreado = true;:}
    |U PA                                   {:tuplasCreadas = true;:}
    |U                                      {:tuplasCreadas = true;:}
    |T                                      {:tituloCreado = true;:}
    |TP                                     {:tipoCreado = true;:}
    |E                                      {:etiquetaCreada = true;:}
    |V                                      {:valorCreado = true;:}
    |EX                                     {:extraCreado = true;:}
    |TOT                                    {:totalCreado = true;:}
    ;

TP ::= TIPO DOS_PUNTOS CANTIDAD PUNTO_COMA                          {:agregarTipo(Tipo.CANTIDAD);:}
    | TIPO DOS_PUNTOS PORCENTAJE PUNTO_COMA                         {:agregarTipo(Tipo.PORCENTAJE);:}
/*    | error DOS_PUNTOS                                          {:agregarError(cur_token, "Se esperaba ':''");:}
    | error PUNTO_COMA                                          {:agregarError(cur_token, "Se esperaba ';''");:}*/
    ;

TOT ::= TOTAL DOS_PUNTOS EXPD:expd PUNTO_COMA                            {:agregarTotal(expd);:}
/*    | error DOS_PUNTOS                                          {:agregarError(cur_token, "Se esperaba ':''");:}
    | error PUNTO_COMA                                          {:agregarError(cur_token, "Se esperaba ';''");:}*/
    ;

E ::= ETIQUETAS DOS_PUNTOS CORCHETE_A C CORCHETE_C PUNTO_COMA       {:agregarEtiqueta();:}
/*    | error DOS_PUNTOS                                          {:agregarError(cur_token, "Se esperaba ':''");:}
    | error PUNTO_COMA                                          {:agregarError(cur_token, "Se esperaba ';''");:}
    | error CORCHETE_A                                          {:agregarError(cur_token, "Se esperaba '[''");:}
    | error CORCHETE_C                                          {:agregarError(cur_token, "Se esperaba '}''");:}*/
    ;

EX ::= EXTRA DOS_PUNTOS CADENA:cadena PUNTO_COMA                    {:agregarExtra(cadena);:}
/*    | error DOS_PUNTOS                                          {:agregarError(cur_token, "Se esperaba ':''");:}
    | error PUNTO_COMA                                          {:agregarError(cur_token, "Se esperaba ';''");:}*/
    ;

V ::= VALORES DOS_PUNTOS CORCHETE_A N CORCHETE_C PUNTO_COMA
/*    | error DOS_PUNTOS                                          {:agregarError(cur_token, "Se esperaba ':''");:}
    | error PUNTO_COMA                                          {:agregarError(cur_token, "Se esperaba ';''");:}*/
    ;

N ::= EXPD:expd COMA N                                                  {:agregarValor(expd);:}
    | EXPD:expd                                                         {:agregarValor(expd);:}
/*    | error COMA                                                {:agregarError(cur_token, "Se esperaba ',''");:}*/
    ;
