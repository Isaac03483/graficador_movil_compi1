
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.jflex_cup.graficadorcup;

import java_cup.runtime.*;
import com.example.models.Graficador;
import com.example.models.Tipo;
import java.util.ArrayList;
import java.util.List;
import com.example.jflex_cup.graficadorflex.GraficadorLexico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GraficadorCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GraficadorCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GraficadorCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraficadorCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\006\000\002\003\006\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\006\006\000\002\007\010\000\002\012" +
    "\003\000\002\012\005\000\002\010\010\000\002\024\005" +
    "\000\002\024\003\000\002\011\010\000\002\013\005\000" +
    "\002\013\007\000\002\014\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\025\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\003\000" +
    "\002\026\003\000\002\026\005\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\020\006\000\002\020\006\000\002\017\006\000\002\021" +
    "\010\000\002\022\006\000\002\023\010\000\002\015\004" +
    "\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\004\004\001\002\000\006\005\007\006" +
    "\011\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\035\146\001\002\000\006\002\uffff\004" +
    "\004\001\002\000\004\035\012\001\002\000\020\010\015" +
    "\013\027\014\024\015\026\016\025\021\023\022\030\001" +
    "\002\000\022\010\015\013\027\014\024\015\026\016\025" +
    "\021\023\022\030\036\uffcf\001\002\000\022\010\015\013" +
    "\027\014\024\015\026\016\025\021\023\022\030\036\uffd0" +
    "\001\002\000\004\027\140\001\002\000\022\010\015\013" +
    "\027\014\024\015\026\016\025\021\023\022\030\036\uffd1" +
    "\001\002\000\022\010\015\013\027\014\024\015\026\016" +
    "\025\021\023\022\030\036\uffd5\001\002\000\022\010\015" +
    "\013\027\014\024\015\026\016\025\021\023\022\030\036" +
    "\uffd3\001\002\000\004\036\134\001\002\000\022\010\015" +
    "\013\027\014\024\015\026\016\025\021\023\022\030\036" +
    "\uffd4\001\002\000\004\027\130\001\002\000\004\027\104" +
    "\001\002\000\004\027\077\001\002\000\004\027\046\001" +
    "\002\000\004\027\036\001\002\000\004\027\033\001\002" +
    "\000\022\010\015\013\027\014\024\015\026\016\025\021" +
    "\023\022\030\036\uffd2\001\002\000\004\036\uffda\001\002" +
    "\000\004\037\034\001\002\000\004\030\035\001\002\000" +
    "\022\010\uffca\013\uffca\014\uffca\015\uffca\016\uffca\021\uffca" +
    "\022\uffca\036\uffca\001\002\000\004\033\037\001\002\000" +
    "\004\037\041\001\002\000\004\034\044\001\002\000\006" +
    "\007\042\034\ufff2\001\002\000\004\037\041\001\002\000" +
    "\004\034\ufff1\001\002\000\004\030\045\001\002\000\022" +
    "\010\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\021\uffcb\022" +
    "\uffcb\036\uffcb\001\002\000\004\033\047\001\002\000\004" +
    "\035\051\001\002\000\004\034\075\001\002\000\006\031" +
    "\052\040\055\001\002\000\006\031\052\040\055\001\002" +
    "\000\014\007\062\023\064\024\061\025\063\026\065\001" +
    "\002\000\004\036\056\001\002\000\020\007\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\032\uffe5\036\uffe5\001\002\000" +
    "\006\007\057\034\uffec\001\002\000\004\035\051\001\002" +
    "\000\004\034\uffeb\001\002\000\006\031\052\040\055\001" +
    "\002\000\006\031\052\040\055\001\002\000\006\031\052" +
    "\040\055\001\002\000\006\031\052\040\055\001\002\000" +
    "\006\031\052\040\055\001\002\000\020\007\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\032\uffe6\036\uffe6\001\002\000" +
    "\020\007\uffe9\023\uffe9\024\uffe9\025\063\026\065\032\uffe9" +
    "\036\uffe9\001\002\000\020\007\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\032\uffe7\036\uffe7\001\002\000\014\023\064" +
    "\024\061\025\063\026\065\036\uffea\001\002\000\020\007" +
    "\uffe8\023\uffe8\024\uffe8\025\063\026\065\032\uffe8\036\uffe8" +
    "\001\002\000\014\023\064\024\061\025\063\026\065\032" +
    "\074\001\002\000\020\007\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\032\uffe4\036\uffe4\001\002\000\004\030\076\001" +
    "\002\000\026\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\021\uffed\022\uffed\036\uffed\001\002\000" +
    "\006\017\100\020\101\001\002\000\004\030\103\001\002" +
    "\000\004\030\102\001\002\000\022\010\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\021\uffcd\022\uffcd\036\uffcd\001\002" +
    "\000\022\010\uffce\013\uffce\014\uffce\015\uffce\016\uffce\021" +
    "\uffce\022\uffce\036\uffce\001\002\000\004\033\105\001\002" +
    "\000\010\031\107\040\112\041\110\001\002\000\022\023" +
    "\121\024\116\025\117\026\122\031\107\034\uffc7\040\112" +
    "\041\110\001\002\000\010\031\107\040\112\041\110\001" +
    "\002\000\030\007\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\030\uffde\031\uffde\032\uffde\034\uffde\040\uffde\041\uffde\001" +
    "\002\000\004\034\113\001\002\000\030\007\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\034" +
    "\uffdf\040\uffdf\041\uffdf\001\002\000\004\030\114\001\002" +
    "\000\022\010\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\021" +
    "\uffc9\022\uffc9\036\uffc9\001\002\000\014\023\121\024\116" +
    "\025\117\026\122\032\120\001\002\000\010\031\107\040" +
    "\112\041\110\001\002\000\010\031\107\040\112\041\110" +
    "\001\002\000\030\007\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd\040\uffdd\041\uffdd" +
    "\001\002\000\010\031\107\040\112\041\110\001\002\000" +
    "\010\031\107\040\112\041\110\001\002\000\030\007\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\034\uffe0\040\uffe0\041\uffe0\001\002\000\030\007\uffe3" +
    "\023\uffe3\024\uffe3\025\117\026\122\030\uffe3\031\uffe3\032" +
    "\uffe3\034\uffe3\040\uffe3\041\uffe3\001\002\000\030\007\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\034\uffe1\040\uffe1\041\uffe1\001\002\000\030\007\uffe2" +
    "\023\uffe2\024\uffe2\025\117\026\122\030\uffe2\031\uffe2\032" +
    "\uffe2\034\uffe2\040\uffe2\041\uffe2\001\002\000\004\034\uffc8" +
    "\001\002\000\010\031\107\040\112\041\110\001\002\000" +
    "\014\023\121\024\116\025\117\026\122\030\132\001\002" +
    "\000\022\010\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\021" +
    "\uffcc\022\uffcc\036\uffcc\001\002\000\004\036\uffdc\001\002" +
    "\000\006\002\ufffd\004\ufffd\001\002\000\004\036\uffdb\001" +
    "\002\000\004\036\uffd6\001\002\000\004\036\uffd9\001\002" +
    "\000\004\037\141\001\002\000\004\030\142\001\002\000" +
    "\026\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\021\ufff4\022\ufff4\036\ufff4\001\002\000\004\036" +
    "\uffd8\001\002\000\004\036\uffd7\001\002\000\004\002\000" +
    "\001\002\000\012\010\015\011\153\012\152\015\026\001" +
    "\002\000\014\010\015\011\153\012\152\015\026\036\ufff6" +
    "\001\002\000\014\010\015\011\153\012\152\015\026\036" +
    "\ufff7\001\002\000\004\036\175\001\002\000\004\027\165" +
    "\001\002\000\004\027\160\001\002\000\014\010\015\011" +
    "\153\012\152\015\026\036\ufff5\001\002\000\014\010\015" +
    "\011\153\012\152\015\026\036\ufff8\001\002\000\004\036" +
    "\ufffc\001\002\000\004\036\ufff9\001\002\000\004\033\161" +
    "\001\002\000\004\037\041\001\002\000\004\034\163\001" +
    "\002\000\004\030\164\001\002\000\014\010\ufff3\011\ufff3" +
    "\012\ufff3\015\ufff3\036\ufff3\001\002\000\004\033\166\001" +
    "\002\000\010\031\107\040\112\041\110\001\002\000\016" +
    "\007\173\023\121\024\116\025\117\026\122\034\uffee\001" +
    "\002\000\004\034\171\001\002\000\004\030\172\001\002" +
    "\000\014\010\ufff0\011\ufff0\012\ufff0\015\ufff0\036\ufff0\001" +
    "\002\000\010\031\107\040\112\041\110\001\002\000\004" +
    "\034\uffef\001\002\000\006\002\ufffe\004\ufffe\001\002\000" +
    "\004\036\ufffb\001\002\000\004\036\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\002\004\001\001\000\004\003\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\144\001\001\000\002\001\001\000\022\005" +
    "\020\006\021\011\016\017\012\020\017\021\030\022\013" +
    "\023\015\001\001\000\022\005\143\006\021\011\016\017" +
    "\012\020\017\021\030\022\013\023\015\001\001\000\022" +
    "\005\142\006\021\011\016\017\012\020\017\021\030\022" +
    "\013\023\015\001\001\000\002\001\001\000\022\005\136" +
    "\006\021\011\016\017\012\020\017\021\030\022\013\023" +
    "\015\001\001\000\022\005\135\006\021\011\016\017\012" +
    "\020\017\021\030\022\013\023\015\001\001\000\022\005" +
    "\134\006\021\011\016\017\012\020\017\021\030\022\013" +
    "\023\015\001\001\000\002\001\001\000\022\005\132\006" +
    "\021\011\016\017\012\020\017\021\030\022\013\023\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\031\006\021\011\016\017\012\020\017\021" +
    "\030\022\013\023\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\047\001\001\000\002\001\001\000\006\014\053\025" +
    "\052\001\001\000\004\025\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\057\001\001\000\002\001\001\000\004\025\071" +
    "\001\001\000\004\025\070\001\001\000\004\025\067\001" +
    "\001\000\004\025\066\001\001\000\004\025\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\110\026" +
    "\105\001\001\000\006\015\126\026\105\001\001\000\004" +
    "\026\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\125\001\001\000\004\026\124\001" +
    "\001\000\002\001\001\000\004\026\123\001\001\000\004" +
    "\026\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\150\006\154\007\147\010" +
    "\146\011\153\001\001\000\014\004\176\006\154\007\147" +
    "\010\146\011\153\001\001\000\014\004\175\006\154\007" +
    "\147\010\146\011\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\156\006\154\007" +
    "\147\010\146\011\153\001\001\000\014\004\155\006\154" +
    "\007\147\010\146\011\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\167\026\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\173\026\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraficadorCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraficadorCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraficadorCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public GraficadorCup(GraficadorLexico lexer) {
        super(lexer);
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }

    boolean tituloCreado = false;
    boolean etiquetaCreada = false;
    boolean valorCreado = false;
    boolean ejeXCreado = false;
    boolean ejeYCreado = false;
    boolean tuplasCreadas = false;
    boolean tipoCreado = false;
    boolean totalCreado = false;
    boolean extraCreado = false;
    Graficador graficador = new Graficador();
    List<String> poolString = new ArrayList<>();

    public void agregarPoolString(String cadena){
        poolString.add(cadena);
    }

    public void agregarTitulo(String cadena){
        if(!tituloCreado){
            graficador.setTitulo(cadena);
        } else {
            System.out.println("ERROR EN TITULO, YA SE HA ESPECIFICADO UNO ANTES.");
        }
    }

    public void agregarEjeX(){
        System.out.println("ejeXCreado = " + ejeXCreado);
        if(!ejeXCreado){
            graficador.setEjeX(poolString);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarEjeY(Double expd){
        if(!ejeYCreado){
            graficador.agregarEjeY(expd);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarEtiqueta(){
        if(!etiquetaCreada){
            graficador.setEtiqueta(poolString);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarValor(Double expd){
        if(!valorCreado){
            graficador.agregarValor(expd);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTupla(Integer valorL, Integer valorR){
        if(!tuplasCreadas){
            graficador.agregarTupla(valorL, valorR);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTipo(Tipo tipo){
        if(!tipoCreado){
            graficador.setTipo(tipo);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTotal(Double total){
        if(!totalCreado && graficador.getTipo() == Tipo.CANTIDAD){
            graficador.setTotal(total);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarExtra(String cadena){
        if(!extraCreado){
            graficador.setExtra(cadena);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void crearBarras(){

        if(tituloCreado && ejeXCreado && ejeYCreado && tuplasCreadas){
            graficador.crearGraficaBarras();
        } else {
            System.out.println("ERROR EN LA CREACIÓN DE LA GRÁFICA DE BARRAS POR FALTA DE DATOS.");
        }

        tituloCreado = false;
        ejeXCreado = false;
        ejeYCreado = false;
        tuplasCreadas = false;
        poolString.clear();
    }

    public void crearPie(){

        if(tituloCreado && etiquetaCreada && valorCreado && tuplasCreadas && tipoCreado && totalCreado && extraCreado){

            graficador.crearGraficaPie();
        } else {
            System.out.println("ERROR AL INTENTAR CREAR LA GRÁFICA POR FALTA DE VALORES.");
        }

        tituloCreado = false;
        etiquetaCreada = false;
        valorCreado = false;
        tuplasCreadas = false;
        tipoCreado = false;
        totalCreado = false;
        extraCreado = false;
        poolString.clear();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GraficadorCup$actions {
  private final GraficadorCup parser;

  /** Constructor */
  CUP$GraficadorCup$actions(GraficadorCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GraficadorCup$do_action_part00000000(
    int                        CUP$GraficadorCup$act_num,
    java_cup.runtime.lr_parser CUP$GraficadorCup$parser,
    java.util.Stack            CUP$GraficadorCup$stack,
    int                        CUP$GraficadorCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GraficadorCup$result;

      /* select the action based on the action number */
      switch (CUP$GraficadorCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= D EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = start_val;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraficadorCup$parser.done_parsing();
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // D ::= DEF G D 
            {
              Object RESULT =null;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("D",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // D ::= DEF G 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("D",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // G ::= BARRAS LLAVE_A BA LLAVE_C 
            {
              Object RESULT =null;
		crearBarras();
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= PIE LLAVE_A PA LLAVE_C 
            {
              Object RESULT =null;
		crearPie();
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BA ::= T BA 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BA ::= X BA 
            {
              Object RESULT =null;
		ejeXCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BA ::= Y BA 
            {
              Object RESULT =null;
		ejeYCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BA ::= U BA 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BA ::= T 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BA ::= X 
            {
              Object RESULT =null;
		ejeXCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BA ::= Y 
            {
              Object RESULT =null;
		ejeYCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BA ::= U 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // T ::= TITULO DOS_PUNTOS CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		agregarTitulo(cadena);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // X ::= EJEX DOS_PUNTOS CORCHETE_A C CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		agregarEjeX();
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // C ::= CADENA 
            {
              Object RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarPoolString(cadena1);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // C ::= CADENA COMA C 
            {
              Object RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		agregarPoolString(cadena1);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Y ::= EJEY DOS_PUNTOS CORCHETE_A LN CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("CREANDO EJEY");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("Y",6, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LN ::= EXPD COMA LN 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		agregarEjeY(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("LN",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LN ::= EXPD 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarEjeY(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("LN",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // U ::= UNIR DOS_PUNTOS CORCHETE_A TUP CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("CREANDO UNIR");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("U",7, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TUP ::= LLAVE_A VAL LLAVE_C 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TUP",9, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TUP ::= LLAVE_A VAL LLAVE_C COMA TUP 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TUP",9, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VAL ::= EXP COMA EXP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarTupla(e1,e2);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("VAL",10, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= EXP SUMA EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() + e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= EXP RESTA EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() - e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= EXP MULTIPLICACION EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() * e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= EXP DIVISION EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() / e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= ENTERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = n;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP ::= PARENTESIS_A EXP PARENTESIS_C 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = e;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPD ::= EXPD SUMA EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() + ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",20, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPD ::= EXPD RESTA EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() - ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",20, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPD ::= EXPD MULTIPLICACION EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() * ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",20, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPD ::= EXPD DIVISION EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() / ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",20, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPD ::= ENTERO 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = Double.valueOf(n);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",20, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPD ::= DECIMAL 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = d;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",20, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPD ::= PARENTESIS_A EXPD PARENTESIS_C 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = e;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",20, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PA ::= T PA 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PA ::= TP PA 
            {
              Object RESULT =null;
		tipoCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PA ::= E PA 
            {
              Object RESULT =null;
		etiquetaCreada = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PA ::= V PA 
            {
              Object RESULT =null;
		valorCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PA ::= EX PA 
            {
              Object RESULT =null;
		extraCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PA ::= TOT PA 
            {
              Object RESULT =null;
		totalCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PA ::= U PA 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PA ::= U 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PA ::= T 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PA ::= TP 
            {
              Object RESULT =null;
		tipoCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PA ::= E 
            {
              Object RESULT =null;
		etiquetaCreada = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PA ::= V 
            {
              Object RESULT =null;
		valorCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PA ::= EX 
            {
              Object RESULT =null;
		extraCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PA ::= TOT 
            {
              Object RESULT =null;
		totalCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TP ::= TIPO DOS_PUNTOS CANTIDAD PUNTO_COMA 
            {
              Object RESULT =null;
		agregarTipo(Tipo.CANTIDAD);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TP",14, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TP ::= TIPO DOS_PUNTOS PORCENTAJE PUNTO_COMA 
            {
              Object RESULT =null;
		agregarTipo(Tipo.PORCENTAJE);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TP",14, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TOT ::= TOTAL DOS_PUNTOS EXPD PUNTO_COMA 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		agregarTotal(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TOT",13, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= ETIQUETAS DOS_PUNTOS CORCHETE_A C CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		agregarEtiqueta();
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EX ::= EXTRA DOS_PUNTOS CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		agregarExtra(cadena);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EX",16, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // V ::= VALORES DOS_PUNTOS CORCHETE_A N CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("V",17, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // N ::= EXPD N 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		agregarValor(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("N",11, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // N ::= EXPD 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarValor(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("N",11, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GraficadorCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GraficadorCup$do_action(
    int                        CUP$GraficadorCup$act_num,
    java_cup.runtime.lr_parser CUP$GraficadorCup$parser,
    java.util.Stack            CUP$GraficadorCup$stack,
    int                        CUP$GraficadorCup$top)
    throws java.lang.Exception
    {
              return CUP$GraficadorCup$do_action_part00000000(
                               CUP$GraficadorCup$act_num,
                               CUP$GraficadorCup$parser,
                               CUP$GraficadorCup$stack,
                               CUP$GraficadorCup$top);
    }
}

}
