
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.jflex_cup.graficadorcup;

import java_cup.runtime.*;
import com.example.models.Graficador;
import com.example.models.Tipo;
import com.example.error.*;
import java.util.ArrayList;
import java.util.List;
import com.example.jflex_cup.graficadorflex.GraficadorLexico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GraficadorCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GraficadorCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GraficadorCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraficadorCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\006\000\002\003\006\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\006\006\000\002\007\010\000\002\012" +
    "\003\000\002\012\005\000\002\010\010\000\002\023\005" +
    "\000\002\023\003\000\002\011\010\000\002\013\005\000" +
    "\002\013\007\000\002\014\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\003\000\002\024\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\003\000" +
    "\002\025\003\000\002\025\005\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\017\006\000\002\017\006\000\002\016\006\000\002\020" +
    "\010\000\002\021\006\000\002\022\010\000\002\015\005" +
    "\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\004\004\001\002\000\010\003\007\005" +
    "\010\006\012\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\034\007\202\023\203\024\215\025" +
    "\205\026\212\027\214\030\204\031\216\032\213\033\210" +
    "\034\207\035\211\036\206\001\002\000\004\035\150\001" +
    "\002\000\006\002\uffff\004\004\001\002\000\004\035\013" +
    "\001\002\000\020\010\015\013\030\014\025\015\027\016" +
    "\026\021\024\022\031\001\002\000\022\010\015\013\030" +
    "\014\025\015\027\016\026\021\024\022\031\036\uffc2\001" +
    "\002\000\004\027\143\001\002\000\022\010\015\013\030" +
    "\014\025\015\027\016\026\021\024\022\031\036\uffc3\001" +
    "\002\000\022\010\015\013\030\014\025\015\027\016\026" +
    "\021\024\022\031\036\uffc4\001\002\000\022\010\015\013" +
    "\030\014\025\015\027\016\026\021\024\022\031\036\uffc6" +
    "\001\002\000\022\010\015\013\030\014\025\015\027\016" +
    "\026\021\024\022\031\036\uffc8\001\002\000\004\036\136" +
    "\001\002\000\022\010\015\013\030\014\025\015\027\016" +
    "\026\021\024\022\031\036\uffc7\001\002\000\004\027\132" +
    "\001\002\000\004\027\105\001\002\000\004\027\100\001" +
    "\002\000\004\027\047\001\002\000\004\027\037\001\002" +
    "\000\004\027\034\001\002\000\022\010\015\013\030\014" +
    "\025\015\027\016\026\021\024\022\031\036\uffc5\001\002" +
    "\000\004\036\uffcd\001\002\000\004\037\035\001\002\000" +
    "\004\030\036\001\002\000\022\010\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\021\uffbd\022\uffbd\036\uffbd\001\002\000" +
    "\004\033\040\001\002\000\004\037\042\001\002\000\004" +
    "\034\045\001\002\000\006\007\043\034\uffe5\001\002\000" +
    "\004\037\042\001\002\000\004\034\uffe4\001\002\000\004" +
    "\030\046\001\002\000\022\010\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\021\uffbe\022\uffbe\036\uffbe\001\002\000\004" +
    "\033\050\001\002\000\004\035\052\001\002\000\004\034" +
    "\076\001\002\000\006\031\053\040\056\001\002\000\006" +
    "\031\053\040\056\001\002\000\004\036\071\001\002\000" +
    "\014\007\057\023\062\024\061\025\060\026\063\001\002" +
    "\000\020\007\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\032" +
    "\uffd8\036\uffd8\001\002\000\006\031\053\040\056\001\002" +
    "\000\006\031\053\040\056\001\002\000\006\031\053\040" +
    "\056\001\002\000\006\031\053\040\056\001\002\000\006" +
    "\031\053\040\056\001\002\000\020\007\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\032\uffd9\036\uffd9\001\002\000\020" +
    "\007\uffdc\023\uffdc\024\uffdc\025\060\026\063\032\uffdc\036" +
    "\uffdc\001\002\000\020\007\uffdb\023\uffdb\024\uffdb\025\060" +
    "\026\063\032\uffdb\036\uffdb\001\002\000\020\007\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\032\uffda\036\uffda\001\002" +
    "\000\014\023\062\024\061\025\060\026\063\036\uffdd\001" +
    "\002\000\006\007\072\034\uffdf\001\002\000\004\035\052" +
    "\001\002\000\004\034\uffde\001\002\000\014\023\062\024" +
    "\061\025\060\026\063\032\075\001\002\000\020\007\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\032\uffd7\036\uffd7\001" +
    "\002\000\004\030\077\001\002\000\026\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\021\uffe0\022" +
    "\uffe0\036\uffe0\001\002\000\006\017\101\020\102\001\002" +
    "\000\004\030\104\001\002\000\004\030\103\001\002\000" +
    "\022\010\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\021\uffc0" +
    "\022\uffc0\036\uffc0\001\002\000\022\010\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\021\uffc1\022\uffc1\036\uffc1\001\002" +
    "\000\004\033\106\001\002\000\010\031\110\040\113\041" +
    "\112\001\002\000\016\007\130\023\122\024\117\025\120" +
    "\026\123\034\uffba\001\002\000\010\031\110\040\113\041" +
    "\112\001\002\000\004\034\114\001\002\000\022\007\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\032\uffd1\034" +
    "\uffd1\001\002\000\022\007\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\030\uffd2\032\uffd2\034\uffd2\001\002\000\004\030" +
    "\115\001\002\000\022\010\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\021\uffbc\022\uffbc\036\uffbc\001\002\000\014\023" +
    "\122\024\117\025\120\026\123\032\121\001\002\000\010" +
    "\031\110\040\113\041\112\001\002\000\010\031\110\040" +
    "\113\041\112\001\002\000\022\007\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\030\uffd0\032\uffd0\034\uffd0\001\002\000" +
    "\010\031\110\040\113\041\112\001\002\000\010\031\110" +
    "\040\113\041\112\001\002\000\022\007\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\030\uffd3\032\uffd3\034\uffd3\001\002" +
    "\000\022\007\uffd6\023\uffd6\024\uffd6\025\120\026\123\030" +
    "\uffd6\032\uffd6\034\uffd6\001\002\000\022\007\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\030\uffd4\032\uffd4\034\uffd4\001" +
    "\002\000\022\007\uffd5\023\uffd5\024\uffd5\025\120\026\123" +
    "\030\uffd5\032\uffd5\034\uffd5\001\002\000\010\031\110\040" +
    "\113\041\112\001\002\000\004\034\uffbb\001\002\000\010" +
    "\031\110\040\113\041\112\001\002\000\014\023\122\024" +
    "\117\025\120\026\123\030\134\001\002\000\022\010\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\021\uffbf\022\uffbf\036" +
    "\uffbf\001\002\000\004\036\uffcf\001\002\000\006\002\ufffd" +
    "\004\ufffd\001\002\000\004\036\uffc9\001\002\000\004\036" +
    "\uffce\001\002\000\004\036\uffcc\001\002\000\004\036\uffcb" +
    "\001\002\000\004\037\144\001\002\000\004\030\145\001" +
    "\002\000\026\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\021\uffe7\022\uffe7\036\uffe7\001\002\000" +
    "\004\036\uffca\001\002\000\004\002\000\001\002\000\012" +
    "\010\015\011\155\012\153\015\027\001\002\000\014\010" +
    "\015\011\155\012\153\015\027\036\uffe9\001\002\000\014" +
    "\010\015\011\155\012\153\015\027\036\uffea\001\002\000" +
    "\004\027\170\001\002\000\004\036\167\001\002\000\004" +
    "\027\162\001\002\000\014\010\015\011\155\012\153\015" +
    "\027\036\uffe8\001\002\000\014\010\015\011\155\012\153" +
    "\015\027\036\uffeb\001\002\000\004\036\uffef\001\002\000" +
    "\004\036\uffec\001\002\000\004\033\163\001\002\000\004" +
    "\037\042\001\002\000\004\034\165\001\002\000\004\030" +
    "\166\001\002\000\014\010\uffe6\011\uffe6\012\uffe6\015\uffe6" +
    "\036\uffe6\001\002\000\006\002\ufffe\004\ufffe\001\002\000" +
    "\004\033\171\001\002\000\010\031\110\040\113\041\112" +
    "\001\002\000\016\007\176\023\122\024\117\025\120\026" +
    "\123\034\uffe1\001\002\000\004\034\174\001\002\000\004" +
    "\030\175\001\002\000\014\010\uffe3\011\uffe3\012\uffe3\015" +
    "\uffe3\036\uffe3\001\002\000\010\031\110\040\113\041\112" +
    "\001\002\000\004\034\uffe2\001\002\000\004\036\uffee\001" +
    "\002\000\004\036\uffed\001\002\000\006\002\ufff0\004\ufff0" +
    "\001\002\000\006\002\ufff6\004\ufff6\001\002\000\006\002" +
    "\ufff9\004\ufff9\001\002\000\006\002\ufff4\004\ufff4\001\002" +
    "\000\006\002\ufffb\004\ufffb\001\002\000\006\002\ufff7\004" +
    "\ufff7\001\002\000\006\002\ufff8\004\ufff8\001\002\000\006" +
    "\002\ufffc\004\ufffc\001\002\000\006\002\ufff3\004\ufff3\001" +
    "\002\000\006\002\ufff1\004\ufff1\001\002\000\006\002\ufffa" +
    "\004\ufffa\001\002\000\006\002\ufff5\004\ufff5\001\002\000" +
    "\006\002\ufff2\004\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\002\004\001\001\000\004\003\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\146\001\001\000\002\001" +
    "\001\000\022\005\021\006\022\011\020\016\013\017\017" +
    "\020\031\021\015\022\016\001\001\000\022\005\145\006" +
    "\022\011\020\016\013\017\017\020\031\021\015\022\016" +
    "\001\001\000\002\001\001\000\022\005\141\006\022\011" +
    "\020\016\013\017\017\020\031\021\015\022\016\001\001" +
    "\000\022\005\140\006\022\011\020\016\013\017\017\020" +
    "\031\021\015\022\016\001\001\000\022\005\137\006\022" +
    "\011\020\016\013\017\017\020\031\021\015\022\016\001" +
    "\001\000\022\005\136\006\022\011\020\016\013\017\017" +
    "\020\031\021\015\022\016\001\001\000\002\001\001\000" +
    "\022\005\134\006\022\011\020\016\013\017\017\020\031" +
    "\021\015\022\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\032\006\022\011\020\016" +
    "\013\017\017\020\031\021\015\022\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\050\001\001\000\002\001\001\000" +
    "\006\014\053\024\054\001\001\000\004\024\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\067\001\001\000\004\024\066\001\001\000\004" +
    "\024\065\001\001\000\004\024\064\001\001\000\004\024" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\110\025\106\001\001\000\002\001\001\000\004" +
    "\025\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\126\001\001\000\004\025\125\001" +
    "\001\000\002\001\001\000\004\025\124\001\001\000\004" +
    "\025\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\130\025\106" +
    "\001\001\000\002\001\001\000\004\025\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\153\006\156\007\151\010\150\011\155\001\001" +
    "\000\014\004\200\006\156\007\151\010\150\011\155\001" +
    "\001\000\014\004\177\006\156\007\151\010\150\011\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\160\006\156\007\151\010\150\011\155" +
    "\001\001\000\014\004\157\006\156\007\151\010\150\011" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\172\025\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\176\025\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraficadorCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraficadorCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraficadorCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public GraficadorCup(GraficadorLexico lexer) {
        super(lexer);
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {

    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }

    boolean tituloCreado = false;
    boolean etiquetaCreada = false;
    boolean valorCreado = false;
    boolean ejeXCreado = false;
    boolean ejeYCreado = false;
    boolean tuplasCreadas = false;
    boolean tipoCreado = false;
    boolean totalCreado = false;
    boolean extraCreado = false;
    Graficador graficador = new Graficador();
    List<String> poolString = new ArrayList<>();
    List<ErrorObj> listaErrores = new ArrayList<>();

    public void agregarPoolString(String cadena){
        poolString.add(cadena);
        System.out.println("ESTA ES UNA PRUEBA DE QUE ESTA ENTRANDO AL POOLSTRING: "+cadena);
        poolString.size();
    }

    public void agregarTitulo(String cadena){
        if(!tituloCreado){
            graficador.setTitulo(cadena);
        } else {
            System.out.println("ERROR EN TITULO, YA SE HA ESPECIFICADO UNO ANTES.");
        }
    }

    public void agregarEjeX(){
        if(!ejeXCreado){
            graficador.setEjeX(poolString);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarEjeY(Double expd){
        if(!ejeYCreado){
            graficador.agregarEjeY(expd);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarEtiqueta(){
        if(!etiquetaCreada){
            graficador.setEtiqueta(poolString);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarValor(Double expd){
        if(!valorCreado){
            graficador.agregarValor(expd);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTupla(Integer valorL, Integer valorR){
        if(!tuplasCreadas){
            graficador.agregarTupla(valorL, valorR);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTipo(Tipo tipo){
        if(!tipoCreado){
            graficador.setTipo(tipo);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTotal(Double total){
        if(!totalCreado && graficador.getTipo() == Tipo.CANTIDAD){
            graficador.setTotal(total);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarExtra(String cadena){
        if(!extraCreado){
            graficador.setExtra(cadena);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void crearBarras(){
        if(tituloCreado && ejeXCreado && ejeYCreado && tuplasCreadas){
            graficador.crearGraficaBarras();
        } else {
            System.out.println("ERROR EN LA CREACIÓN DE LA GRÁFICA DE BARRAS POR FALTA DE DATOS.");
        }

        tituloCreado = false;
        ejeXCreado = false;
        ejeYCreado = false;
        tuplasCreadas = false;
        poolString.clear();
    }

    public void crearPie(){

        if(tituloCreado && etiquetaCreada && valorCreado && tuplasCreadas && tipoCreado && totalCreado && extraCreado){

            graficador.crearGraficaPie();
        } else {
            System.out.println("ERROR AL INTENTAR CREAR LA GRÁFICA POR FALTA DE VALORES.");
        }

        tituloCreado = false;
        etiquetaCreada = false;
        valorCreado = false;
        tuplasCreadas = false;
        tipoCreado = false;
        totalCreado = false;
        extraCreado = false;
        poolString.clear();
    }

    private void agregarError(Symbol cur_token, String message){

        listaErrores.add(new ErrorObj(ErrorType.SINTACTICO,cur_token.toString(), message, cur_token.left, cur_token.right));

    }

    public List<ErrorObj> getListaErrores(){
        return listaErrores;
    }

    public Graficador getGraficador(){
        return graficador;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GraficadorCup$actions {
  private final GraficadorCup parser;

  /** Constructor */
  CUP$GraficadorCup$actions(GraficadorCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GraficadorCup$do_action_part00000000(
    int                        CUP$GraficadorCup$act_num,
    java_cup.runtime.lr_parser CUP$GraficadorCup$parser,
    java.util.Stack            CUP$GraficadorCup$stack,
    int                        CUP$GraficadorCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GraficadorCup$result;

      /* select the action based on the action number */
      switch (CUP$GraficadorCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= D EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = start_val;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraficadorCup$parser.done_parsing();
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // D ::= DEF G D 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("D",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // D ::= DEF G 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("D",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // G ::= BARRAS LLAVE_A BA LLAVE_C 
            {
              Object RESULT =null;
		crearBarras();
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= PIE LLAVE_A PA LLAVE_C 
            {
              Object RESULT =null;
		crearPie();
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // G ::= error LLAVE_A 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba '{''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // G ::= error LLAVE_C 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba '}''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // G ::= error DOS_PUNTOS 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba ':''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // G ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba ';''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // G ::= error CORCHETE_A 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba '[''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // G ::= error CORCHETE_C 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba '}''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // G ::= error SUMA 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba '+''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // G ::= error RESTA 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba '-''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // G ::= error MULTIPLICACION 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba '*''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // G ::= error DIVISION 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba '/''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // G ::= error PARENTESIS_A 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba '(''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // G ::= error PARENTESIS_C 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba ')''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // G ::= error COMA 
            {
              Object RESULT =null;
		agregarError(cur_token, "Se esperaba ',''");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BA ::= T BA 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BA ::= X BA 
            {
              Object RESULT =null;
		ejeXCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BA ::= Y BA 
            {
              Object RESULT =null;
		ejeYCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BA ::= U BA 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BA ::= T 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BA ::= X 
            {
              Object RESULT =null;
		ejeXCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BA ::= Y 
            {
              Object RESULT =null;
		ejeYCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BA ::= U 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T ::= TITULO DOS_PUNTOS CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		agregarTitulo(cadena);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // X ::= EJEX DOS_PUNTOS CORCHETE_A C CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		agregarEjeX();System.out.println("ESTA ENTRANDO");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // C ::= CADENA 
            {
              Object RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarPoolString(cadena1);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // C ::= CADENA COMA C 
            {
              Object RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		agregarPoolString(cadena1);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Y ::= EJEY DOS_PUNTOS CORCHETE_A LN CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("Y",6, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LN ::= EXPD COMA LN 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		agregarEjeY(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("LN",17, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LN ::= EXPD 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarEjeY(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("LN",17, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // U ::= UNIR DOS_PUNTOS CORCHETE_A TUP CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("U",7, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TUP ::= LLAVE_A VAL LLAVE_C 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TUP",9, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TUP ::= LLAVE_A VAL LLAVE_C COMA TUP 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TUP",9, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VAL ::= EXP COMA EXP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarTupla(e1,e2);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("VAL",10, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP SUMA EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() + e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= EXP RESTA EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() - e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP MULTIPLICACION EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() * e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP DIVISION EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() / e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= ENTERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = n;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= PARENTESIS_A EXP PARENTESIS_C 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = e;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPD ::= EXPD SUMA EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() + ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPD ::= EXPD RESTA EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() - ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPD ::= EXPD MULTIPLICACION EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() * ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPD ::= EXPD DIVISION EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() / ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPD ::= ENTERO 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = Double.valueOf(n);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPD ::= DECIMAL 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = d;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPD ::= PARENTESIS_A EXPD PARENTESIS_C 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = e;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PA ::= T PA 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PA ::= TP PA 
            {
              Object RESULT =null;
		tipoCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PA ::= E PA 
            {
              Object RESULT =null;
		etiquetaCreada = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PA ::= V PA 
            {
              Object RESULT =null;
		valorCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PA ::= EX PA 
            {
              Object RESULT =null;
		extraCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PA ::= TOT PA 
            {
              Object RESULT =null;
		totalCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PA ::= U PA 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PA ::= U 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PA ::= T 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PA ::= TP 
            {
              Object RESULT =null;
		tipoCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PA ::= E 
            {
              Object RESULT =null;
		etiquetaCreada = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PA ::= V 
            {
              Object RESULT =null;
		valorCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PA ::= EX 
            {
              Object RESULT =null;
		extraCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PA ::= TOT 
            {
              Object RESULT =null;
		totalCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TP ::= TIPO DOS_PUNTOS CANTIDAD PUNTO_COMA 
            {
              Object RESULT =null;
		agregarTipo(Tipo.CANTIDAD);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TP",13, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TP ::= TIPO DOS_PUNTOS PORCENTAJE PUNTO_COMA 
            {
              Object RESULT =null;
		agregarTipo(Tipo.PORCENTAJE);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TP",13, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TOT ::= TOTAL DOS_PUNTOS EXPD PUNTO_COMA 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		agregarTotal(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TOT",12, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= ETIQUETAS DOS_PUNTOS CORCHETE_A C CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		agregarEtiqueta();
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EX ::= EXTRA DOS_PUNTOS CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		agregarExtra(cadena);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EX",15, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // V ::= VALORES DOS_PUNTOS CORCHETE_A N CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("V",16, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // N ::= EXPD COMA N 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		agregarValor(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("N",11, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // N ::= EXPD 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarValor(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("N",11, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GraficadorCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GraficadorCup$do_action(
    int                        CUP$GraficadorCup$act_num,
    java_cup.runtime.lr_parser CUP$GraficadorCup$parser,
    java.util.Stack            CUP$GraficadorCup$stack,
    int                        CUP$GraficadorCup$top)
    throws java.lang.Exception
    {
              return CUP$GraficadorCup$do_action_part00000000(
                               CUP$GraficadorCup$act_num,
                               CUP$GraficadorCup$parser,
                               CUP$GraficadorCup$stack,
                               CUP$GraficadorCup$top);
    }
}

}
