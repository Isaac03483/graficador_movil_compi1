
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.jflex_cup.graficadorcup;

import java_cup.runtime.*;
import com.example.models.Graficador;
import com.example.jflex_cup.graficadorflex.GraficadorLexico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GraficadorCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GraficadorCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GraficadorCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraficadorCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\006\000\002\003\006\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\006\006\000\002\007\010\000\002\012" +
    "\003\000\002\012\005\000\002\010\010\000\002\023\005" +
    "\000\002\023\003\000\002\011\010\000\002\013\005\000" +
    "\002\013\007\000\002\014\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\003\000\002\024\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\003\000" +
    "\002\025\003\000\002\025\005\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\017\006\000\002\017\006\000\002" +
    "\016\006\000\002\020\010\000\002\021\006\000\002\022" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\004\004\001\002\000\006\005\007\006" +
    "\011\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\035\110\001\002\000\006\002\uffff\004" +
    "\004\001\002\000\004\035\012\001\002\000\016\010\015" +
    "\013\025\014\023\016\024\021\022\022\026\001\002\000" +
    "\020\010\015\013\025\014\023\016\024\021\022\022\026" +
    "\036\uffd1\001\002\000\020\010\015\013\025\014\023\016" +
    "\024\021\022\022\026\036\uffd2\001\002\000\004\027\102" +
    "\001\002\000\020\010\015\013\025\014\023\016\024\021" +
    "\022\022\026\036\uffd3\001\002\000\020\010\015\013\025" +
    "\014\023\016\024\021\022\022\026\036\uffd5\001\002\000" +
    "\004\036\077\001\002\000\020\010\015\013\025\014\023" +
    "\016\024\021\022\022\026\036\uffd6\001\002\000\004\027" +
    "\073\001\002\000\004\027\051\001\002\000\004\027\044" +
    "\001\002\000\004\027\034\001\002\000\004\027\031\001" +
    "\002\000\020\010\015\013\025\014\023\016\024\021\022" +
    "\022\026\036\uffd4\001\002\000\004\036\uffda\001\002\000" +
    "\004\037\032\001\002\000\004\030\033\001\002\000\020" +
    "\010\uffcc\013\uffcc\014\uffcc\016\uffcc\021\uffcc\022\uffcc\036" +
    "\uffcc\001\002\000\004\033\035\001\002\000\004\037\037" +
    "\001\002\000\004\034\042\001\002\000\006\007\040\034" +
    "\ufff2\001\002\000\004\037\037\001\002\000\004\034\ufff1" +
    "\001\002\000\004\030\043\001\002\000\020\010\uffcd\013" +
    "\uffcd\014\uffcd\016\uffcd\021\uffcd\022\uffcd\036\uffcd\001\002" +
    "\000\006\017\045\020\046\001\002\000\004\030\050\001" +
    "\002\000\004\030\047\001\002\000\020\010\uffcf\013\uffcf" +
    "\014\uffcf\016\uffcf\021\uffcf\022\uffcf\036\uffcf\001\002\000" +
    "\020\010\uffd0\013\uffd0\014\uffd0\016\uffd0\021\uffd0\022\uffd0" +
    "\036\uffd0\001\002\000\004\033\052\001\002\000\010\031" +
    "\054\040\056\041\055\001\002\000\014\023\063\024\060" +
    "\025\061\026\064\034\071\001\002\000\010\031\054\040" +
    "\056\041\055\001\002\000\022\007\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\030\uffde\032\uffde\034\uffde\001\002\000" +
    "\022\007\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf" +
    "\032\uffdf\034\uffdf\001\002\000\014\023\063\024\060\025" +
    "\061\026\064\032\062\001\002\000\010\031\054\040\056" +
    "\041\055\001\002\000\010\031\054\040\056\041\055\001" +
    "\002\000\022\007\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\030\uffdd\032\uffdd\034\uffdd\001\002\000\010\031\054\040" +
    "\056\041\055\001\002\000\010\031\054\040\056\041\055" +
    "\001\002\000\022\007\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\032\uffe0\034\uffe0\001\002\000\022\007\uffe3" +
    "\023\uffe3\024\uffe3\025\061\026\064\030\uffe3\032\uffe3\034" +
    "\uffe3\001\002\000\022\007\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\030\uffe1\032\uffe1\034\uffe1\001\002\000\022\007" +
    "\uffe2\023\uffe2\024\uffe2\025\061\026\064\030\uffe2\032\uffe2" +
    "\034\uffe2\001\002\000\004\030\072\001\002\000\020\010" +
    "\uffcb\013\uffcb\014\uffcb\016\uffcb\021\uffcb\022\uffcb\036\uffcb" +
    "\001\002\000\010\031\054\040\056\041\055\001\002\000" +
    "\014\023\063\024\060\025\061\026\064\030\075\001\002" +
    "\000\020\010\uffce\013\uffce\014\uffce\016\uffce\021\uffce\022" +
    "\uffce\036\uffce\001\002\000\004\036\uffdc\001\002\000\006" +
    "\002\ufffd\004\ufffd\001\002\000\004\036\uffdb\001\002\000" +
    "\004\036\uffd9\001\002\000\004\037\103\001\002\000\004" +
    "\030\104\001\002\000\026\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\021\ufff4\022\ufff4\036\ufff4" +
    "\001\002\000\004\036\uffd8\001\002\000\004\036\uffd7\001" +
    "\002\000\004\002\000\001\002\000\012\010\015\011\115" +
    "\012\114\015\120\001\002\000\014\010\015\011\115\012" +
    "\114\015\120\036\ufff6\001\002\000\014\010\015\011\115" +
    "\012\114\015\120\036\ufff7\001\002\000\004\036\171\001" +
    "\002\000\004\027\161\001\002\000\004\027\154\001\002" +
    "\000\014\010\015\011\115\012\114\015\120\036\ufff5\001" +
    "\002\000\014\010\015\011\115\012\114\015\120\036\ufff8" +
    "\001\002\000\004\027\121\001\002\000\004\033\122\001" +
    "\002\000\004\035\124\001\002\000\004\034\150\001\002" +
    "\000\006\031\125\040\130\001\002\000\006\031\125\040" +
    "\130\001\002\000\014\007\135\023\137\024\134\025\136" +
    "\026\140\001\002\000\004\036\131\001\002\000\020\007" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\032\uffe5\036\uffe5" +
    "\001\002\000\006\007\132\034\uffec\001\002\000\004\035" +
    "\124\001\002\000\004\034\uffeb\001\002\000\006\031\125" +
    "\040\130\001\002\000\006\031\125\040\130\001\002\000" +
    "\006\031\125\040\130\001\002\000\006\031\125\040\130" +
    "\001\002\000\006\031\125\040\130\001\002\000\020\007" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\032\uffe6\036\uffe6" +
    "\001\002\000\020\007\uffe9\023\uffe9\024\uffe9\025\136\026" +
    "\140\032\uffe9\036\uffe9\001\002\000\020\007\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\032\uffe7\036\uffe7\001\002\000" +
    "\014\023\137\024\134\025\136\026\140\036\uffea\001\002" +
    "\000\020\007\uffe8\023\uffe8\024\uffe8\025\136\026\140\032" +
    "\uffe8\036\uffe8\001\002\000\014\023\137\024\134\025\136" +
    "\026\140\032\147\001\002\000\020\007\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\032\uffe4\036\uffe4\001\002\000\004" +
    "\030\151\001\002\000\014\010\uffed\011\uffed\012\uffed\015" +
    "\uffed\036\uffed\001\002\000\004\036\ufffc\001\002\000\004" +
    "\036\ufff9\001\002\000\004\033\155\001\002\000\004\037" +
    "\037\001\002\000\004\034\157\001\002\000\004\030\160" +
    "\001\002\000\014\010\ufff3\011\ufff3\012\ufff3\015\ufff3\036" +
    "\ufff3\001\002\000\004\033\162\001\002\000\010\031\054" +
    "\040\056\041\055\001\002\000\016\007\167\023\063\024" +
    "\060\025\061\026\064\034\uffee\001\002\000\004\034\165" +
    "\001\002\000\004\030\166\001\002\000\014\010\ufff0\011" +
    "\ufff0\012\ufff0\015\ufff0\036\ufff0\001\002\000\010\031\054" +
    "\040\056\041\055\001\002\000\004\034\uffef\001\002\000" +
    "\006\002\ufffe\004\ufffe\001\002\000\004\036\ufffb\001\002" +
    "\000\004\036\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\002\004\001\001\000\004\003\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\106\001\001\000\002\001\001\000\020\005" +
    "\017\006\020\016\012\017\016\020\026\021\013\022\015" +
    "\001\001\000\020\005\105\006\020\016\012\017\016\020" +
    "\026\021\013\022\015\001\001\000\020\005\104\006\020" +
    "\016\012\017\016\020\026\021\013\022\015\001\001\000" +
    "\002\001\001\000\020\005\100\006\020\016\012\017\016" +
    "\020\026\021\013\022\015\001\001\000\020\005\077\006" +
    "\020\016\012\017\016\020\026\021\013\022\015\001\001" +
    "\000\002\001\001\000\020\005\075\006\020\016\012\017" +
    "\016\020\026\021\013\022\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\027\006\020\016\012\017\016" +
    "\020\026\021\013\022\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\052\001\001\000" +
    "\002\001\001\000\004\025\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\067\001" +
    "\001\000\004\025\066\001\001\000\002\001\001\000\004" +
    "\025\065\001\001\000\004\025\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\112\006\116\007\111\010\110\011\115\001\001\000\014" +
    "\004\172\006\116\007\111\010\110\011\115\001\001\000" +
    "\014\004\171\006\116\007\111\010\110\011\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\152\006\116\007\111\010\110\011\115\001\001" +
    "\000\014\004\151\006\116\007\111\010\110\011\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\122" +
    "\001\001\000\002\001\001\000\006\014\126\024\125\001" +
    "\001\000\004\024\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\132\001\001\000\002\001\001\000\004\024\144\001\001" +
    "\000\004\024\143\001\001\000\004\024\142\001\001\000" +
    "\004\024\141\001\001\000\004\024\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\163\025\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\167\025\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraficadorCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraficadorCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraficadorCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public GraficadorCup(GraficadorLexico lexer) {
        super(lexer);
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }

    boolean tituloCreado = false;
    boolean etiquetaCreada = false;
    boolean valorCreado = false;
    boolean ejeXCreado = false;
    boolean ejeYCreado = false;
    boolean tuplasCreadas = false;
    boolean tipoCreado = false;
    boolean totalCreado = false;
    boolean extraCreado = false;
    Graficador graficador = new Graficador();

    public void agregarTitulo(String cadena){
        if(!tituloCreado){
            System.out.println("CREANDO TITULO.");
        } else {
            System.out.println("ERROR EN TITULO, YA SE HA ESPECIFICADO UNO ANTES.");
        }
    }

    public void agregarEjeX(){
        if(!ejeXCreado){
            System.out.println("CREANDO EJEX.");
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarEjeY(Double expd){
        if(!ejeYCreado){
            System.out.println("CREANDO EJEY.");
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarEtiqueta(){
        if(!etiquetaCreada){
            System.out.println("CREANDO ETIQUETA.");
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarValor(){
        if(!valorCreado){
            System.out.println("CREANDO VALOR.");
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTupla(Integer valorL, Integer valorR){
        if(!tuplasCreadas){
            System.out.println("CREANDO TUPLA.");
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTipo(){
        if(!tipoCreado){
            System.out.println("CREANDO TIPO.");
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTotal(){
        if(!totalCreado){
            System.out.println("CREANDO TOTAL.");
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarExtra(){
        if(!extraCreado){
            System.out.println("CREANDO EXTRA.");
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void crearBarras(){
        tituloCreado = false;
        ejeXCreado = false;
        ejeYCreado = false;
        tuplasCreadas = false;
    }

    public void crearPie(){
        tituloCreado = false;
        etiquetaCreada = false;
        valorCreado = false;
        tuplasCreadas = false;
        tipoCreado = false;
        totalCreado = false;
        extraCreado = false;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GraficadorCup$actions {
  private final GraficadorCup parser;

  /** Constructor */
  CUP$GraficadorCup$actions(GraficadorCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GraficadorCup$do_action_part00000000(
    int                        CUP$GraficadorCup$act_num,
    java_cup.runtime.lr_parser CUP$GraficadorCup$parser,
    java.util.Stack            CUP$GraficadorCup$stack,
    int                        CUP$GraficadorCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GraficadorCup$result;

      /* select the action based on the action number */
      switch (CUP$GraficadorCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= D EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = start_val;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraficadorCup$parser.done_parsing();
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // D ::= DEF G D 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("D",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // D ::= DEF G 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("D",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // G ::= BARRAS LLAVE_A BA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("CREANDO GRAFICA DE BARRAS"); crearBarras();
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= PIE LLAVE_A PA LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("CREANDO GRAFICA DE PIE");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BA ::= T BA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BA ::= X BA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BA ::= Y BA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BA ::= U BA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BA ::= T 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BA ::= X 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BA ::= Y 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BA ::= U 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // T ::= TITULO DOS_PUNTOS CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		agregarTitulo(cadena);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // X ::= EJEX DOS_PUNTOS CORCHETE_A C CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("CREANDO EJEX");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // C ::= CADENA 
            {
              Object RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // C ::= CADENA COMA C 
            {
              Object RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Y ::= EJEY DOS_PUNTOS CORCHETE_A LN CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("CREANDO EJEY");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("Y",6, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LN ::= EXPD COMA LN 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		agregarEjeY(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("LN",17, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LN ::= EXPD 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("LN",17, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // U ::= UNIR DOS_PUNTOS CORCHETE_A TUP CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("CREANDO UNIR");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("U",7, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TUP ::= LLAVE_A VAL LLAVE_C 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TUP",9, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TUP ::= LLAVE_A VAL LLAVE_C COMA TUP 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TUP",9, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VAL ::= EXP COMA EXP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		System.out.println("EL RESULTADO ES: "+e1+","+e2);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("VAL",10, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= EXP SUMA EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() + e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= EXP RESTA EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() - e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= EXP MULTIPLICACION EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() * e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= EXP DIVISION EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() / e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= ENTERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = n;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP ::= PARENTESIS_A EXP PARENTESIS_C 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = e;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPD ::= EXPD SUMA EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() + ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPD ::= EXPD RESTA EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() - ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPD ::= EXPD MULTIPLICACION EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() * ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPD ::= EXPD DIVISION EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() / ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPD ::= ENTERO 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = Double.valueOf(n);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPD ::= DECIMAL 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = d;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPD ::= PARENTESIS_A EXPD PARENTESIS_C 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = e;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PA ::= T PA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PA ::= TP PA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PA ::= E PA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PA ::= V PA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PA ::= EX PA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PA ::= TOT PA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PA ::= T 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PA ::= TP 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PA ::= E 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PA ::= V 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PA ::= EX 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PA ::= TOT 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TP ::= TIPO DOS_PUNTOS CANTIDAD PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("CREANDO TIPO CANTIDAD");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TP",13, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TP ::= TIPO DOS_PUNTOS PORCENTAJE PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("CREANDO TIPO PORCENTAJE");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TP",13, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TOT ::= TOTAL DOS_PUNTOS EXPD PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("CREANDO TOTAL");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TOT",12, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= ETIQUETAS DOS_PUNTOS CORCHETE_A C CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("CREANDO ETIQUETAS");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EX ::= EXTRA DOS_PUNTOS CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("CREANDO EXTRA");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EX",15, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // V ::= VALORES DOS_PUNTOS CORCHETE_A EXPD CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("CREANDO VALORES");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("V",16, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GraficadorCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GraficadorCup$do_action(
    int                        CUP$GraficadorCup$act_num,
    java_cup.runtime.lr_parser CUP$GraficadorCup$parser,
    java.util.Stack            CUP$GraficadorCup$stack,
    int                        CUP$GraficadorCup$top)
    throws java.lang.Exception
    {
              return CUP$GraficadorCup$do_action_part00000000(
                               CUP$GraficadorCup$act_num,
                               CUP$GraficadorCup$parser,
                               CUP$GraficadorCup$stack,
                               CUP$GraficadorCup$top);
    }
}

}
