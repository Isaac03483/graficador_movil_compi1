
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.jflex_cup.graficadorcup;

import java_cup.runtime.*;
import com.example.models.Graficador;
import com.example.models.Tipo;
import com.example.error.*;
import java.util.ArrayList;
import java.util.List;
import com.example.jflex_cup.graficadorflex.GraficadorLexico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GraficadorCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GraficadorCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GraficadorCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraficadorCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\003\006\000\002\003\006\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\006\006\000\002\007\010\000\002\012\003" +
    "\000\002\012\005\000\002\010\010\000\002\023\005\000" +
    "\002\023\003\000\002\011\010\000\002\013\005\000\002" +
    "\013\007\000\002\014\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\024\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\003\000\002" +
    "\025\003\000\002\025\005\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\017" +
    "\006\000\002\017\006\000\002\016\006\000\002\020\010" +
    "\000\002\021\006\000\002\022\010\000\002\015\005\000" +
    "\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\006\003\004\004\005\001\002\000\010\004" +
    "\202\030\203\036\204\001\002\000\006\005\010\006\012" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\004\035\150\001\002\000\010\002\uffff\003\004" +
    "\004\005\001\002\000\004\035\013\001\002\000\020\010" +
    "\015\013\030\014\025\015\027\016\026\021\024\022\031" +
    "\001\002\000\022\010\015\013\030\014\025\015\027\016" +
    "\026\021\024\022\031\036\uffcc\001\002\000\004\027\143" +
    "\001\002\000\022\010\015\013\030\014\025\015\027\016" +
    "\026\021\024\022\031\036\uffcd\001\002\000\022\010\015" +
    "\013\030\014\025\015\027\016\026\021\024\022\031\036" +
    "\uffce\001\002\000\022\010\015\013\030\014\025\015\027" +
    "\016\026\021\024\022\031\036\uffd2\001\002\000\022\010" +
    "\015\013\030\014\025\015\027\016\026\021\024\022\031" +
    "\036\uffd0\001\002\000\004\036\136\001\002\000\022\010" +
    "\015\013\030\014\025\015\027\016\026\021\024\022\031" +
    "\036\uffd1\001\002\000\004\027\132\001\002\000\004\027" +
    "\105\001\002\000\004\027\100\001\002\000\004\027\047" +
    "\001\002\000\004\027\037\001\002\000\004\027\034\001" +
    "\002\000\022\010\015\013\030\014\025\015\027\016\026" +
    "\021\024\022\031\036\uffcf\001\002\000\004\036\uffd7\001" +
    "\002\000\004\037\035\001\002\000\004\030\036\001\002" +
    "\000\022\010\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\021" +
    "\uffc7\022\uffc7\036\uffc7\001\002\000\004\033\040\001\002" +
    "\000\004\037\042\001\002\000\004\034\045\001\002\000" +
    "\006\007\043\034\uffef\001\002\000\004\037\042\001\002" +
    "\000\004\034\uffee\001\002\000\004\030\046\001\002\000" +
    "\022\010\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\021\uffc8" +
    "\022\uffc8\036\uffc8\001\002\000\004\033\050\001\002\000" +
    "\004\035\052\001\002\000\004\034\076\001\002\000\006" +
    "\031\053\040\056\001\002\000\006\031\053\040\056\001" +
    "\002\000\004\036\071\001\002\000\014\007\060\023\062" +
    "\024\057\025\061\026\063\001\002\000\020\007\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\032\uffe2\036\uffe2\001\002" +
    "\000\006\031\053\040\056\001\002\000\006\031\053\040" +
    "\056\001\002\000\006\031\053\040\056\001\002\000\006" +
    "\031\053\040\056\001\002\000\006\031\053\040\056\001" +
    "\002\000\020\007\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\032\uffe3\036\uffe3\001\002\000\020\007\uffe6\023\uffe6\024" +
    "\uffe6\025\061\026\063\032\uffe6\036\uffe6\001\002\000\020" +
    "\007\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\032\uffe4\036" +
    "\uffe4\001\002\000\014\023\062\024\057\025\061\026\063" +
    "\036\uffe7\001\002\000\020\007\uffe5\023\uffe5\024\uffe5\025" +
    "\061\026\063\032\uffe5\036\uffe5\001\002\000\006\007\072" +
    "\034\uffe9\001\002\000\004\035\052\001\002\000\004\034" +
    "\uffe8\001\002\000\014\023\062\024\057\025\061\026\063" +
    "\032\075\001\002\000\020\007\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\032\uffe1\036\uffe1\001\002\000\004\030\077" +
    "\001\002\000\026\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\021\uffea\022\uffea\036\uffea\001\002" +
    "\000\006\017\101\020\102\001\002\000\004\030\104\001" +
    "\002\000\004\030\103\001\002\000\022\010\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\021\uffca\022\uffca\036\uffca\001" +
    "\002\000\022\010\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\021\uffcb\022\uffcb\036\uffcb\001\002\000\004\033\106\001" +
    "\002\000\010\031\110\040\113\041\111\001\002\000\016" +
    "\007\130\023\122\024\117\025\120\026\123\034\uffc4\001" +
    "\002\000\010\031\110\040\113\041\111\001\002\000\022" +
    "\007\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\032" +
    "\uffdb\034\uffdb\001\002\000\004\034\114\001\002\000\022" +
    "\007\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\032" +
    "\uffdc\034\uffdc\001\002\000\004\030\115\001\002\000\022" +
    "\010\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\021\uffc6\022" +
    "\uffc6\036\uffc6\001\002\000\014\023\122\024\117\025\120" +
    "\026\123\032\121\001\002\000\010\031\110\040\113\041" +
    "\111\001\002\000\010\031\110\040\113\041\111\001\002" +
    "\000\022\007\uffda\023\uffda\024\uffda\025\uffda\026\uffda\030" +
    "\uffda\032\uffda\034\uffda\001\002\000\010\031\110\040\113" +
    "\041\111\001\002\000\010\031\110\040\113\041\111\001" +
    "\002\000\022\007\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\030\uffdd\032\uffdd\034\uffdd\001\002\000\022\007\uffe0\023" +
    "\uffe0\024\uffe0\025\120\026\123\030\uffe0\032\uffe0\034\uffe0" +
    "\001\002\000\022\007\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\030\uffde\032\uffde\034\uffde\001\002\000\022\007\uffdf" +
    "\023\uffdf\024\uffdf\025\120\026\123\030\uffdf\032\uffdf\034" +
    "\uffdf\001\002\000\010\031\110\040\113\041\111\001\002" +
    "\000\004\034\uffc5\001\002\000\010\031\110\040\113\041" +
    "\111\001\002\000\014\023\122\024\117\025\120\026\123" +
    "\030\134\001\002\000\022\010\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\021\uffc9\022\uffc9\036\uffc9\001\002\000\004" +
    "\036\uffd9\001\002\000\010\002\ufffa\003\ufffa\004\ufffa\001" +
    "\002\000\004\036\uffd8\001\002\000\004\036\uffd3\001\002" +
    "\000\004\036\uffd6\001\002\000\004\036\uffd5\001\002\000" +
    "\004\037\144\001\002\000\004\030\145\001\002\000\026" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\021\ufff1\022\ufff1\036\ufff1\001\002\000\004\036\uffd4" +
    "\001\002\000\004\002\000\001\002\000\012\010\015\011" +
    "\155\012\153\015\027\001\002\000\014\010\015\011\155" +
    "\012\153\015\027\036\ufff3\001\002\000\014\010\015\011" +
    "\155\012\153\015\027\036\ufff4\001\002\000\004\027\170" +
    "\001\002\000\004\036\167\001\002\000\004\027\162\001" +
    "\002\000\014\010\015\011\155\012\153\015\027\036\ufff2" +
    "\001\002\000\014\010\015\011\155\012\153\015\027\036" +
    "\ufff5\001\002\000\004\036\ufff9\001\002\000\004\036\ufff6" +
    "\001\002\000\004\033\163\001\002\000\004\037\042\001" +
    "\002\000\004\034\165\001\002\000\004\030\166\001\002" +
    "\000\014\010\ufff0\011\ufff0\012\ufff0\015\ufff0\036\ufff0\001" +
    "\002\000\010\002\ufffb\003\ufffb\004\ufffb\001\002\000\004" +
    "\033\171\001\002\000\010\031\110\040\113\041\111\001" +
    "\002\000\016\007\176\023\122\024\117\025\120\026\123" +
    "\034\uffeb\001\002\000\004\034\174\001\002\000\004\030" +
    "\175\001\002\000\014\010\uffed\011\uffed\012\uffed\015\uffed" +
    "\036\uffed\001\002\000\010\031\110\040\113\041\111\001" +
    "\002\000\004\034\uffec\001\002\000\004\036\ufff8\001\002" +
    "\000\004\036\ufff7\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\003\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\146\001\001\000\002\001" +
    "\001\000\022\005\021\006\022\011\017\016\013\017\020" +
    "\020\031\021\015\022\016\001\001\000\022\005\145\006" +
    "\022\011\017\016\013\017\020\020\031\021\015\022\016" +
    "\001\001\000\002\001\001\000\022\005\141\006\022\011" +
    "\017\016\013\017\020\020\031\021\015\022\016\001\001" +
    "\000\022\005\140\006\022\011\017\016\013\017\020\020" +
    "\031\021\015\022\016\001\001\000\022\005\137\006\022" +
    "\011\017\016\013\017\020\020\031\021\015\022\016\001" +
    "\001\000\022\005\136\006\022\011\017\016\013\017\020" +
    "\020\031\021\015\022\016\001\001\000\002\001\001\000" +
    "\022\005\134\006\022\011\017\016\013\017\020\020\031" +
    "\021\015\022\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\032\006\022\011\017\016" +
    "\013\017\020\020\031\021\015\022\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\050\001\001\000\002\001\001\000" +
    "\006\014\053\024\054\001\001\000\004\024\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\067\001\001\000\004\024\066\001\001\000\004" +
    "\024\065\001\001\000\004\024\064\001\001\000\004\024" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\111\025\106\001\001\000\002\001\001\000\004" +
    "\025\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\126\001\001\000\004\025\125\001" +
    "\001\000\002\001\001\000\004\025\124\001\001\000\004" +
    "\025\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\130\025\106" +
    "\001\001\000\002\001\001\000\004\025\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\153\006\156\007\151\010\150\011\155\001\001" +
    "\000\014\004\200\006\156\007\151\010\150\011\155\001" +
    "\001\000\014\004\177\006\156\007\151\010\150\011\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\160\006\156\007\151\010\150\011\155" +
    "\001\001\000\014\004\157\006\156\007\151\010\150\011" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\172\025\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\176\025\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraficadorCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraficadorCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraficadorCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public GraficadorCup(GraficadorLexico lexer) {
        super(lexer);
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        listaErrores.add(new ErrorObj(ErrorType.SINTACTICO, sym.terminalNames[cur_token.sym],"valor no esperado", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }

    boolean tituloCreado = false;
    boolean etiquetaCreada = false;
    boolean valorCreado = false;
    boolean ejeXCreado = false;
    boolean ejeYCreado = false;
    boolean tuplasCreadas = false;
    boolean tipoCreado = false;
    boolean totalCreado = false;
    boolean extraCreado = false;
    Graficador graficador = new Graficador();
    List<String> poolString = new ArrayList<>();
    List<ErrorObj> listaErrores = new ArrayList<>();

    public void agregarPoolString(String cadena){
        poolString.add(cadena);
        System.out.println("ESTA ES UNA PRUEBA DE QUE ESTA ENTRANDO AL POOLSTRING: "+cadena);
        poolString.size();
    }

    public void agregarTitulo(String cadena){
        if(!tituloCreado){
            graficador.setTitulo(cadena);
        } else {
            System.out.println("ERROR EN TITULO, YA SE HA ESPECIFICADO UNO ANTES.");
        }
    }

    public void agregarEjeX(){
        if(!ejeXCreado){
            graficador.setEjeX(poolString);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarEjeY(Double expd){
        if(!ejeYCreado){
            graficador.agregarEjeY(expd);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarEtiqueta(){
        if(!etiquetaCreada){
            graficador.setEtiqueta(poolString);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarValor(Double expd){
        if(!valorCreado){
            graficador.agregarValor(expd);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTupla(Integer valorL, Integer valorR){
        if(!tuplasCreadas){
            graficador.agregarTupla(valorL, valorR);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTipo(Tipo tipo){
        if(!tipoCreado){
            graficador.setTipo(tipo);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarTotal(Double total){
        if(!totalCreado && graficador.getTipo() == Tipo.CANTIDAD){
            graficador.setTotal(total);
        } else {
            System.out.println("ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void agregarExtra(String cadena){
        if(!extraCreado){
            graficador.setExtra(cadena);
        } else {
            System.out.println("ERROR AL AGREGAR ETIQUETAS, ESTE ATRIBUTO YA HA SIDO ESPECIFICADO ANTES.");
        }
    }

    public void crearBarras(){
        if(tituloCreado && ejeXCreado && ejeYCreado && tuplasCreadas){
            graficador.crearGraficaBarras();
        } else {
            System.out.println("ERROR EN LA CREACIÓN DE LA GRÁFICA DE BARRAS POR FALTA DE DATOS.");
        }

        tituloCreado = false;
        ejeXCreado = false;
        ejeYCreado = false;
        tuplasCreadas = false;
        poolString.clear();
    }

    public void crearPie(){

        if(tituloCreado && etiquetaCreada && valorCreado && tuplasCreadas && tipoCreado && totalCreado && extraCreado){

            graficador.crearGraficaPie();
        } else {
            System.out.println("ERROR AL INTENTAR CREAR LA GRÁFICA POR FALTA DE VALORES.");
        }

        tituloCreado = false;
        etiquetaCreada = false;
        valorCreado = false;
        tuplasCreadas = false;
        tipoCreado = false;
        totalCreado = false;
        extraCreado = false;
        poolString.clear();
    }

    private void agregarError(Symbol cur_token, String message){

        listaErrores.add(new ErrorObj(ErrorType.SINTACTICO,cur_token.toString(), message, cur_token.left, cur_token.right));

    }

    public List<ErrorObj> getListaErrores(){
        return listaErrores;
    }

    public Graficador getGraficador(){
        return graficador;
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GraficadorCup$actions {
  private final GraficadorCup parser;

  /** Constructor */
  CUP$GraficadorCup$actions(GraficadorCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GraficadorCup$do_action_part00000000(
    int                        CUP$GraficadorCup$act_num,
    java_cup.runtime.lr_parser CUP$GraficadorCup$parser,
    java.util.Stack            CUP$GraficadorCup$stack,
    int                        CUP$GraficadorCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GraficadorCup$result;

      /* select the action based on the action number */
      switch (CUP$GraficadorCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= D EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = start_val;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraficadorCup$parser.done_parsing();
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // D ::= DEF G D 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("D",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // D ::= DEF G 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("D",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // D ::= error DEF 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("D",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // D ::= error LLAVE_C 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("D",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("D",0, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // G ::= BARRAS LLAVE_A BA LLAVE_C 
            {
              Object RESULT =null;
		crearBarras();
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // G ::= PIE LLAVE_A PA LLAVE_C 
            {
              Object RESULT =null;
		crearPie();
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("G",1, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BA ::= T BA 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BA ::= X BA 
            {
              Object RESULT =null;
		ejeXCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BA ::= Y BA 
            {
              Object RESULT =null;
		ejeYCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BA ::= U BA 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BA ::= T 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BA ::= X 
            {
              Object RESULT =null;
		ejeXCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BA ::= Y 
            {
              Object RESULT =null;
		ejeYCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BA ::= U 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("BA",2, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // T ::= TITULO DOS_PUNTOS CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		agregarTitulo(cadena);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // X ::= EJEX DOS_PUNTOS CORCHETE_A C CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		agregarEjeX();System.out.println("ESTA ENTRANDO");
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // C ::= CADENA 
            {
              Object RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarPoolString(cadena1);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // C ::= CADENA COMA C 
            {
              Object RESULT =null;
		int cadena1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int cadena1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		String cadena1 = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		agregarPoolString(cadena1);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Y ::= EJEY DOS_PUNTOS CORCHETE_A LN CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("Y",6, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LN ::= EXPD COMA LN 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		agregarEjeY(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("LN",17, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LN ::= EXPD 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarEjeY(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("LN",17, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // U ::= UNIR DOS_PUNTOS CORCHETE_A TUP CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("U",7, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TUP ::= LLAVE_A VAL LLAVE_C 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TUP",9, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TUP ::= LLAVE_A VAL LLAVE_C COMA TUP 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TUP",9, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VAL ::= EXP COMA EXP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarTupla(e1,e2);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("VAL",10, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= EXP SUMA EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() + e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= EXP RESTA EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() - e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP ::= EXP MULTIPLICACION EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() * e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= EXP DIVISION EXP 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Integer(e1.intValue() / e2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= ENTERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = n;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= PARENTESIS_A EXP PARENTESIS_C 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = e;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPD ::= EXPD SUMA EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() + ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPD ::= EXPD RESTA EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() - ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPD ::= EXPD MULTIPLICACION EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() * ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPD ::= EXPD DIVISION EXPD 
            {
              Double RESULT =null;
		int ed1left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double ed1 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double ed2 = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = new Double(ed1.intValue() / ed2.intValue());
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPD ::= ENTERO 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = Double.valueOf(n);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPD ::= DECIMAL 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		RESULT = d;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPD ::= PARENTESIS_A EXPD PARENTESIS_C 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		RESULT = e;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EXPD",19, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PA ::= T PA 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PA ::= TP PA 
            {
              Object RESULT =null;
		tipoCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PA ::= E PA 
            {
              Object RESULT =null;
		etiquetaCreada = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PA ::= V PA 
            {
              Object RESULT =null;
		valorCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PA ::= EX PA 
            {
              Object RESULT =null;
		extraCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PA ::= TOT PA 
            {
              Object RESULT =null;
		totalCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PA ::= U PA 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PA ::= U 
            {
              Object RESULT =null;
		tuplasCreadas = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PA ::= T 
            {
              Object RESULT =null;
		tituloCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PA ::= TP 
            {
              Object RESULT =null;
		tipoCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PA ::= E 
            {
              Object RESULT =null;
		etiquetaCreada = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PA ::= V 
            {
              Object RESULT =null;
		valorCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PA ::= EX 
            {
              Object RESULT =null;
		extraCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PA ::= TOT 
            {
              Object RESULT =null;
		totalCreado = true;
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("PA",3, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TP ::= TIPO DOS_PUNTOS CANTIDAD PUNTO_COMA 
            {
              Object RESULT =null;
		agregarTipo(Tipo.CANTIDAD);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TP",13, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TP ::= TIPO DOS_PUNTOS PORCENTAJE PUNTO_COMA 
            {
              Object RESULT =null;
		agregarTipo(Tipo.PORCENTAJE);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TP",13, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TOT ::= TOTAL DOS_PUNTOS EXPD PUNTO_COMA 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		agregarTotal(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("TOT",12, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= ETIQUETAS DOS_PUNTOS CORCHETE_A C CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;
		agregarEtiqueta();
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EX ::= EXTRA DOS_PUNTOS CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-1)).value;
		agregarExtra(cadena);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("EX",15, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // V ::= VALORES DOS_PUNTOS CORCHETE_A N CORCHETE_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("V",16, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // N ::= EXPD COMA N 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)).value;
		agregarValor(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("N",11, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.elementAt(CUP$GraficadorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // N ::= EXPD 
            {
              Object RESULT =null;
		int expdleft = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).left;
		int expdright = ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()).right;
		Double expd = (Double)((java_cup.runtime.Symbol) CUP$GraficadorCup$stack.peek()).value;
		agregarValor(expd);
              CUP$GraficadorCup$result = parser.getSymbolFactory().newSymbol("N",11, ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficadorCup$stack.peek()), RESULT);
            }
          return CUP$GraficadorCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GraficadorCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GraficadorCup$do_action(
    int                        CUP$GraficadorCup$act_num,
    java_cup.runtime.lr_parser CUP$GraficadorCup$parser,
    java.util.Stack            CUP$GraficadorCup$stack,
    int                        CUP$GraficadorCup$top)
    throws java.lang.Exception
    {
              return CUP$GraficadorCup$do_action_part00000000(
                               CUP$GraficadorCup$act_num,
                               CUP$GraficadorCup$parser,
                               CUP$GraficadorCup$stack,
                               CUP$GraficadorCup$top);
    }
}

}
